"use strict";
console.log("Starting in relations");

const
	  affinity  = require('affinity'),
	  Relation  = affinity.Relation;

console.log("Finished in relationas");

module.exports = {
   relationA : {
	  _affinity : new Relation([
						{characterId: { type: affinity.Integer}},
						{firstName: { type: affinity.String}},
						{lastName: { type: affinity.String}}
	  ],[
	  [1, 'John', 'Doe'],
	  [2, 'Mary', 'Poppins'],
	  [3, 'Lucky', 'Luke']
	  ]),

	  plain : "[[characterId / Integer, firstName / String, lastName / String] -> [1, 'John', 'Doe'], [2, 'Mary', 'Poppins'], [3, 'Lucky', 'Luke']];"
   },

   relationB : {
	  _affinity : new Relation([
						{product: { type: affinity.String}}
	  ],[
	  ['Doll'],
	  ['PlayMobile'],
	  ]),

	  plain : "[[product / String] -> ['Doll'],['PlayMobile']]",
   },

   relationC : {
	  _affinity : new Relation([
						{characterId: { type: affinity.Integer}},
						{fan: { type: affinity.String}}
	  ],[
	  [1, 'Mr X'],
	  [1, 'Miss Dibble'],
	  [2, 'Nat Bibble']
	  ]),
	  plain : "[[characterId / Integer, fan / String] -> [1, 'Mr X'],[1, 'Miss Dibble'],[2, 'Nat Bibble']];"
   },

   relationD : {
	  _affinity : new Relation([
						{a: { type: affinity.Integer}},
						{b: { type: affinity.Integer}},
						{c: { type: affinity.Integer}}
	  ], [
	  [1, 2, 3]
	  ]),
	  plain : "[[a / Integer, b / Integer, c / Integer] -> [1, 2, 3]];",
   },

   relationE : {
	  _affinity : new affinity.Relation([
						{characterId: { type: affinity.Integer}},
						{firstName: { type: affinity.String}},
						{lastName: { type: affinity.String}}
	  ],[
	  [1, 'Mr', 'X'],
	  [2, 'Lady', 'Gaga'],
	  [3, 'Bo', 'Vril']
	  ]),
	  plain : "[[characterId / Integer, firstName / String, lastName / String] -> [1, 'Mr', 'X'],[2, 'Lady', 'Gaga'], [3, 'Bo', 'Vril']];",
   },
   
   relationF : {
   	  _affinity : new Relation([
						{a: { type: affinity.Integer}},
						{b: { type: affinity.Integer}},
						{c: { type: affinity.Integer}}
	  ], [
	  [1, 2, 3],
	  [4, 5, 6],
	  [7, 8, 9]
	  ]),
	  plain : "[[a / Integer, b / Integer, c / Integer] -> [1, 2, 3], [4, 5, 6], [7, 8, 9]];",
   },
};
